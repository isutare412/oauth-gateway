// Code generated by mockery v2.46.3. DO NOT EDIT.

package mockport

import (
	context "context"

	model "github.com/isutare412/oauth-gateway/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockGoogleAuthClient is an autogenerated mock type for the GoogleAuthClient type
type MockGoogleAuthClient struct {
	mock.Mock
}

type MockGoogleAuthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleAuthClient) EXPECT() *MockGoogleAuthClient_Expecter {
	return &MockGoogleAuthClient_Expecter{mock: &_m.Mock}
}

// ExchangeAuthorizationCode provides a mock function with given fields: ctx, code, redirectURI
func (_m *MockGoogleAuthClient) ExchangeAuthorizationCode(ctx context.Context, code string, redirectURI string) (model.GoogleTokenResponse, error) {
	ret := _m.Called(ctx, code, redirectURI)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeAuthorizationCode")
	}

	var r0 model.GoogleTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.GoogleTokenResponse, error)); ok {
		return rf(ctx, code, redirectURI)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.GoogleTokenResponse); ok {
		r0 = rf(ctx, code, redirectURI)
	} else {
		r0 = ret.Get(0).(model.GoogleTokenResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, redirectURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoogleAuthClient_ExchangeAuthorizationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeAuthorizationCode'
type MockGoogleAuthClient_ExchangeAuthorizationCode_Call struct {
	*mock.Call
}

// ExchangeAuthorizationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - redirectURI string
func (_e *MockGoogleAuthClient_Expecter) ExchangeAuthorizationCode(ctx interface{}, code interface{}, redirectURI interface{}) *MockGoogleAuthClient_ExchangeAuthorizationCode_Call {
	return &MockGoogleAuthClient_ExchangeAuthorizationCode_Call{Call: _e.mock.On("ExchangeAuthorizationCode", ctx, code, redirectURI)}
}

func (_c *MockGoogleAuthClient_ExchangeAuthorizationCode_Call) Run(run func(ctx context.Context, code string, redirectURI string)) *MockGoogleAuthClient_ExchangeAuthorizationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGoogleAuthClient_ExchangeAuthorizationCode_Call) Return(_a0 model.GoogleTokenResponse, _a1 error) *MockGoogleAuthClient_ExchangeAuthorizationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoogleAuthClient_ExchangeAuthorizationCode_Call) RunAndReturn(run func(context.Context, string, string) (model.GoogleTokenResponse, error)) *MockGoogleAuthClient_ExchangeAuthorizationCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoogleAuthClient creates a new instance of MockGoogleAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleAuthClient {
	mock := &MockGoogleAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
